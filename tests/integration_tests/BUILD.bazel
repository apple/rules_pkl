# Copyright Â© 2024-2025 Apple Inc. and the Pkl project authors. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

load("@bazel_binaries//:defs.bzl", "bazel_binaries")
load(
    "@rules_bazel_integration_test//bazel_integration_test:defs.bzl",
    "bazel_integration_tests",
    "default_test_runner",
    "integration_test_utils",
)

default_test_runner(
    name = "simple_test_runner",
)

bazel_integration_tests(
    name = "multiple_pkl_projects_test",
    bazel_versions = bazel_binaries.versions.all,
    tags = integration_test_utils.DEFAULT_INTEGRATION_TEST_TAGS + [
        # Add 'no-sandbox' tag to disable running this test target in the Bazel sandbox to prevent
        # file permission issues when accessing/writing to the cache.
        "no-sandbox",
    ],
    test_runner = ":simple_test_runner",
    workspace_files = integration_test_utils.glob_workspace_files("example_workspaces/multiple_pkl_projects") + [
        "//:workspace_files",
    ],
    workspace_path = "example_workspaces/multiple_pkl_projects",
)

bazel_integration_tests(
    name = "simple_test",
    bazel_versions = bazel_binaries.versions.all,
    tags = integration_test_utils.DEFAULT_INTEGRATION_TEST_TAGS + [
        # Add 'no-sandbox' tag to disable running this test target in the Bazel sandbox to prevent
        # file permission issues when accessing/writing to the cache.
        "no-sandbox",
    ],
    test_runner = ":simple_test_runner",
    workspace_files = integration_test_utils.glob_workspace_files("example_workspaces/simple") + [
        "//:workspace_files",
    ],
    workspace_path = "example_workspaces/simple",
)

bazel_integration_tests(
    name = "override_version_test",
    bazel_versions = bazel_binaries.versions.all,
    tags = integration_test_utils.DEFAULT_INTEGRATION_TEST_TAGS + [
        # Add 'no-sandbox' tag to disable running this test target in the Bazel sandbox to prevent
        # file permission issues when accessing/writing to the cache.
        "no-sandbox",
    ],
    test_runner = ":simple_test_runner",
    workspace_files = integration_test_utils.glob_workspace_files("example_workspaces/override_version") + [
        "//:workspace_files",
    ],
    workspace_path = "example_workspaces/override_version",
)

bazel_integration_tests(
    name = "pkl_cache_poisoning_test",
    bazel_versions = bazel_binaries.versions.all,
    tags = integration_test_utils.DEFAULT_INTEGRATION_TEST_TAGS + [
        # Add 'no-sandbox' tag to disable running this test target in the Bazel sandbox to prevent
        # file permission issues when accessing/writing to the cache.
        "no-sandbox",
    ],
    test_runner = ":simple_test_runner",
    workspace_files = integration_test_utils.glob_workspace_files("example_workspaces/pkl_cache") + [
        "//:workspace_files",
    ],
    workspace_path = "example_workspaces/pkl_cache",
)

bazel_integration_tests(
    name = "pkl_project_test",
    bazel_versions = bazel_binaries.versions.all,
    tags = integration_test_utils.DEFAULT_INTEGRATION_TEST_TAGS + [
        # Add 'no-sandbox' tag to disable running this test target in the Bazel sandbox to prevent
        # file permission issues when accessing/writing to the cache.
        "no-sandbox",
    ],
    test_runner = ":simple_test_runner",
    workspace_files = integration_test_utils.glob_workspace_files("example_workspaces/pkl_project") + [
        "//:workspace_files",
    ],
    workspace_path = "example_workspaces/pkl_project",
)

# By default, the integration test targets are tagged as `manual`, so we need
# define a `test_suite` target for the integration test to be executed during
# bazel test //...
test_suite(
    name = "all_integration_tests",
    tests =
        integration_test_utils.bazel_integration_test_names(
            ":multiple_pkl_projects_test",
            bazel_binaries.versions.all,
        ) +
        integration_test_utils.bazel_integration_test_names(
            ":pkl_cache_poisoning_test",
            bazel_binaries.versions.all,
        ) +
        integration_test_utils.bazel_integration_test_names(
            ":simple_test",
            bazel_binaries.versions.all,
        ) +
        integration_test_utils.bazel_integration_test_names(
            ":override_version_test",
            bazel_binaries.versions.all,
        ) +
        integration_test_utils.bazel_integration_test_names(
            ":pkl_project_test",
            bazel_binaries.versions.all,
        ),
    visibility = ["//:__subpackages__"],
)
