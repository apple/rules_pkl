# Copyright Â© 2024-2025 Apple Inc. and the Pkl project authors. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

load("@aspect_bazel_lib//lib:diff_test.bzl", "diff_test")
load("@rules_shell//shell:sh_test.bzl", "sh_test")
load("//pkl:defs.bzl", "pkl_eval", "pkl_library")

pkl_eval(
    name = "pkl_eval_with_src_dep",
    srcs = [
        "srcs/pets.pkl",
        "srcs/petsOverride.pkl",
    ],
    entrypoints = ["srcs/petsOverride.pkl"],
)

diff_test(
    name = "pkl_eval_with_srcs_dep_diff_test",
    file1 = "expected/pets.pcf",
    file2 = ":pkl_eval_with_src_dep",
)

pkl_library(
    name = "pets_pkl_lib",
    srcs = ["srcs/pets.pkl"],
)

pkl_eval(
    name = "pkl_eval_with_lib_dep",
    srcs = [
        "srcs/petsOverride.pkl",
    ],
    entrypoints = ["srcs/petsOverride.pkl"],
    deps = [":pets_pkl_lib"],
)

diff_test(
    name = "pkl_eval_with_lib_dep_diff_test",
    file1 = "expected/pets.pcf",
    file2 = ":pkl_eval_with_lib_dep",
)

pkl_eval(
    name = "pkl_eval_with_ext_lib_dep",
    srcs = ["srcs/petsWithLibDep.pkl"],
    deps = ["//tests/pkl_eval/srcs/foo:my_pets"],
)

diff_test(
    name = "pkl_eval_with_ext_lib_dep_diff_test",
    file1 = "expected/pets.pcf",
    file2 = ":pkl_eval_with_ext_lib_dep",
)

pkl_eval(
    name = "pkl_eval_without_out",
    srcs = ["srcs/pets.pkl"],
)

pkl_eval(
    name = "pkl_eval_with_out",
    srcs = ["srcs/pets.pkl"],
    outs = ["helloworld.pcf"],
)

pkl_eval(
    name = "pkl_eval_multiple_with_outs",
    srcs = [
        "srcs/multipleOutputs.pkl",
    ],
    outs = [
        "cars/fiat.yaml",
        "vans/ford.json",
    ],
    multiple_outputs = True,
)

pkl_eval(
    name = "pkl_eval_multiple_without_outs",
    srcs = [
        "srcs/multipleOutputs.pkl",
    ],
    multiple_outputs = True,
)

sh_test(
    name = "pkl_eval_multiple_with_outputs_test",
    srcs = ["verify_pkl_eval_output.sh"],
    args = [
        "multiple_outputs_specified",
    ],
    data = [
        "expected/multiple_outputs_specified.txt",
        ":pkl_eval_multiple_with_outs",
    ],
)

sh_test(
    name = "pkl_eval_multiple_without_outputs_test",
    srcs = ["verify_pkl_eval_output.sh"],
    args = [
        "multiple_outputs_not_specified",
    ],
    data = [
        "expected/multiple_outputs_not_specified.txt",
        ":pkl_eval_multiple_without_outs",
    ],
)

sh_test(
    name = "pkl_eval_with_outs_test",
    srcs = ["verify_pkl_eval_output.sh"],
    args = ["single_output_specified"],
    data = [
        "expected/single_output_specified.txt",
        ":pkl_eval_with_out",
    ],
)

sh_test(
    name = "pkl_eval_without_outs_test",
    srcs = ["verify_pkl_eval_output.sh"],
    args = ["single_output_not_specified"],
    data = [
        "expected/single_output_not_specified.txt",
        ":pkl_eval_without_out",
    ],
)

pkl_eval(
    name = "pets_without_rabbit",
    srcs = ["srcs/pets.pkl"],
    expression = "pets.filter((x) -> x != \"rabbit\")",
)

diff_test(
    name = "pkl_eval_with_expression_diff_test",
    file1 = "expected/filtered_animals.pcf",
    file2 = ":pets_without_rabbit",
)

genrule(
    name = "generated_pkl",
    outs = ["generated.pkl"],
    cmd_bash = """
cat << EOF >> $@
pets = List("dog", "cat", "rabbit", "hamster")
EOF
    """,
)

pkl_library(
    name = "generated_pkl_lib",
    srcs = ["generated_pkl"],
)

pkl_eval(
    name = "pkl_eval_with_generated_lib_dep",
    srcs = [
        "srcs/generatedOverride.pkl",
    ],
    entrypoints = ["srcs/generatedOverride.pkl"],
    deps = [
        ":generated_pkl_lib",
    ],
)

diff_test(
    name = "pkl_eval_with_generated_lib_dep_diff_test",
    file1 = ":pkl_eval_with_generated_lib_dep",
    file2 = "expected/pets.pcf",
)

pkl_eval(
    name = "pkl_eval_with_generated_src",
    srcs = [
        "generated_pkl",
        "srcs/generatedOverride.pkl",
    ],
    entrypoints = ["srcs/generatedOverride.pkl"],
)

diff_test(
    name = "pkl_eval_with_generated_src_diff_test",
    file1 = ":pkl_eval_with_generated_src",
    file2 = "expected/pets.pcf",
)

pkl_eval(
    name = "pkl_eval_multiple_with_overlapping_directory_outs",
    srcs = [
        "srcs/multipleOutputsOverlappingDirectory.pkl",
    ],
    outs = [
        "fiat/cinquecento.yaml",
        "fiat/panda.yaml",
    ],
    multiple_outputs = True,
)

sh_test(
    name = "pkl_eval_multiple_with_overlapping_directory_outs_test",
    srcs = ["verify_pkl_eval_output.sh"],
    args = ["multiple_outputs_specific_overlapping_directory"],
    data = [
        "expected/multiple_outputs_specific_overlapping_directory.txt",
        ":pkl_eval_multiple_with_overlapping_directory_outs",
    ],
)

genrule(
    name = "gen_entrypoint",
    outs = ["entrypoint.pkl"],
    cmd = """
cat << EOF >> $(location entrypoint.pkl)
pets = List("dog", "cat", "rabbit", "hamster")
EOF
    """,
)

pkl_eval(
    name = "pkl_eval_with_genrule_entrypoint",
    srcs = ["entrypoint.pkl"],
    entrypoints = ["entrypoint.pkl"],
    expression = "pets.filter((x) -> x != \"rabbit\")",
)

diff_test(
    name = "pkl_eval_with_genrule_entrypoint_diff_test",
    file1 = ":pkl_eval_with_genrule_entrypoint",
    file2 = "expected/filtered_animals.pcf",
)
